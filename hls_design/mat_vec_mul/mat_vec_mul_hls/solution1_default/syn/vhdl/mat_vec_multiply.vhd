-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mat_vec_multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mat_in_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    mat_in_ce0 : OUT STD_LOGIC;
    mat_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vec_in_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    vec_in_ce0 : OUT STD_LOGIC;
    vec_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    accumulator_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    accumulator_ce0 : OUT STD_LOGIC;
    accumulator_we0 : OUT STD_LOGIC;
    accumulator_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    accumulator_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mat_vec_multiply is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mat_vec_multiply,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.035000,HLS_SYN_LAT=98,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=142,HLS_SYN_LUT=323,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_161_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_323 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln12_fu_175_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln12_reg_328 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln11_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_185_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_336 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln13_2_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_2_reg_341 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln12_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln13_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln13_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_1_fu_222_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_364 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal xor_ln20_fu_228_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln20_reg_369 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln18_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_244_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_377 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln19_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal accumulator_addr_reg_387 : STD_LOGIC_VECTOR (1 downto 0);
    signal dot_prod_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dot_prod_ce0 : STD_LOGIC;
    signal dot_prod_we0 : STD_LOGIC;
    signal dot_prod_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_110 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_reg_121 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i1_0_reg_132 : STD_LOGIC_VECTOR (2 downto 0);
    signal j2_0_reg_144 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln13_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln20_2_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_167_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln13_1_fu_196_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_fu_200_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln13_fu_210_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln13_fu_210_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_fu_250_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_256_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln20_fu_264_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln19_fu_234_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln20_fu_271_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln20_1_fu_275_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_290_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln20_1_fu_281_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln20_1_fu_298_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln20_3_fu_302_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component mat_vec_multiply_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dot_prod_U : component mat_vec_multiply_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dot_prod_address0,
        ce0 => dot_prod_ce0,
        we0 => dot_prod_we0,
        d0 => mul_ln13_reg_356,
        q0 => dot_prod_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_155_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_132 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln19_fu_238_p2 = ap_const_lv1_1))) then 
                i1_0_reg_132 <= i_1_reg_364;
            end if; 
        end if;
    end process;

    i_0_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_110 <= i_reg_323;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_110 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j2_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j2_0_reg_144 <= j_1_reg_377;
            elsif (((icmp_ln18_fu_216_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j2_0_reg_144 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_reg_121 <= j_reg_336;
            elsif (((icmp_ln11_fu_155_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_121 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_238_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                accumulator_addr_reg_387 <= zext_ln20_fu_285_p1(2 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_1_reg_364 <= i_1_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_323 <= i_fu_161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_1_reg_377 <= j_1_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_336 <= j_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_ln13_reg_356 <= mul_ln13_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_216_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                xor_ln20_reg_369 <= xor_ln20_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_155_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln12_reg_328(4 downto 2) <= zext_ln12_fu_175_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln13_2_reg_341(5 downto 0) <= zext_ln13_2_fu_205_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln12_reg_328(1 downto 0) <= "00";
    zext_ln12_reg_328(5) <= '0';
    zext_ln13_2_reg_341(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln11_fu_155_p2, ap_CS_fsm_state3, icmp_ln12_fu_179_p2, ap_CS_fsm_state6, icmp_ln18_fu_216_p2, ap_CS_fsm_state7, icmp_ln19_fu_238_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln11_fu_155_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln12_fu_179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln18_fu_216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln19_fu_238_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    accumulator_address0_assign_proc : process(ap_CS_fsm_state7, accumulator_addr_reg_387, ap_CS_fsm_state8, zext_ln20_fu_285_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accumulator_address0 <= accumulator_addr_reg_387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            accumulator_address0 <= zext_ln20_fu_285_p1(2 - 1 downto 0);
        else 
            accumulator_address0 <= "XX";
        end if; 
    end process;


    accumulator_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            accumulator_ce0 <= ap_const_logic_1;
        else 
            accumulator_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    accumulator_d0 <= std_logic_vector(unsigned(dot_prod_q0) + unsigned(accumulator_q0));

    accumulator_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accumulator_we0 <= ap_const_logic_1;
        else 
            accumulator_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln13_fu_200_p2 <= std_logic_vector(unsigned(zext_ln12_reg_328) + unsigned(zext_ln13_1_fu_196_p1));
    add_ln20_1_fu_275_p2 <= std_logic_vector(unsigned(zext_ln19_fu_234_p1) + unsigned(sext_ln20_fu_271_p1));
    add_ln20_3_fu_302_p2 <= std_logic_vector(signed(sext_ln20_1_fu_281_p1) + signed(zext_ln20_1_fu_298_p1));
    add_ln20_fu_250_p2 <= std_logic_vector(unsigned(i1_0_reg_132) + unsigned(j2_0_reg_144));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state6, icmp_ln18_fu_216_p2)
    begin
        if (((icmp_ln18_fu_216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln18_fu_216_p2)
    begin
        if (((icmp_ln18_fu_216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dot_prod_address0_assign_proc : process(zext_ln13_2_reg_341, ap_CS_fsm_state7, ap_CS_fsm_state5, sext_ln20_2_fu_308_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dot_prod_address0 <= sext_ln20_2_fu_308_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dot_prod_address0 <= zext_ln13_2_reg_341(4 - 1 downto 0);
        else 
            dot_prod_address0 <= "XXXX";
        end if; 
    end process;


    dot_prod_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            dot_prod_ce0 <= ap_const_logic_1;
        else 
            dot_prod_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dot_prod_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dot_prod_we0 <= ap_const_logic_1;
        else 
            dot_prod_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_222_p2 <= std_logic_vector(unsigned(i1_0_reg_132) + unsigned(ap_const_lv3_1));
    i_fu_161_p2 <= std_logic_vector(unsigned(i_0_reg_110) + unsigned(ap_const_lv3_1));
    icmp_ln11_fu_155_p2 <= "1" when (i_0_reg_110 = ap_const_lv3_4) else "0";
    icmp_ln12_fu_179_p2 <= "1" when (j_0_reg_121 = ap_const_lv3_4) else "0";
    icmp_ln18_fu_216_p2 <= "1" when (i1_0_reg_132 = ap_const_lv3_4) else "0";
    icmp_ln19_fu_238_p2 <= "1" when (j2_0_reg_144 = ap_const_lv3_4) else "0";
    j_1_fu_244_p2 <= std_logic_vector(unsigned(j2_0_reg_144) + unsigned(ap_const_lv3_1));
    j_fu_185_p2 <= std_logic_vector(unsigned(j_0_reg_121) + unsigned(ap_const_lv3_1));
    mat_in_address0 <= zext_ln13_2_fu_205_p1(4 - 1 downto 0);

    mat_in_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mat_in_ce0 <= ap_const_logic_1;
        else 
            mat_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln13_fu_210_p0 <= vec_in_q0;
    mul_ln13_fu_210_p1 <= mat_in_q0;
    mul_ln13_fu_210_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln13_fu_210_p0) * signed(mul_ln13_fu_210_p1))), 32));
    select_ln20_fu_264_p3 <= 
        xor_ln20_reg_369 when (tmp_4_fu_256_p3(0) = '1') else 
        i1_0_reg_132;
        sext_ln20_1_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln20_1_fu_275_p2),6));

        sext_ln20_2_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln20_3_fu_302_p2),64));

        sext_ln20_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln20_fu_264_p3),4));

    tmp_2_fu_167_p3 <= (i_0_reg_110 & ap_const_lv2_0);
    tmp_3_fu_290_p3 <= (j2_0_reg_144 & ap_const_lv2_0);
    tmp_4_fu_256_p3 <= add_ln20_fu_250_p2(2 downto 2);
    vec_in_address0 <= zext_ln13_fu_191_p1(2 - 1 downto 0);

    vec_in_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            vec_in_ce0 <= ap_const_logic_1;
        else 
            vec_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln20_fu_228_p2 <= (i1_0_reg_132 xor ap_const_lv3_4);
    zext_ln12_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_167_p3),6));
    zext_ln13_1_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_121),6));
    zext_ln13_2_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_fu_200_p2),64));
    zext_ln13_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_121),64));
    zext_ln19_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_144),4));
    zext_ln20_1_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_290_p3),6));
    zext_ln20_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_144),64));
end behav;
