// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mat_vec_multiply.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mat_vec_multiply::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mat_vec_multiply::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> mat_vec_multiply::ap_ST_fsm_state1 = "1";
const sc_lv<8> mat_vec_multiply::ap_ST_fsm_state2 = "10";
const sc_lv<8> mat_vec_multiply::ap_ST_fsm_state3 = "100";
const sc_lv<8> mat_vec_multiply::ap_ST_fsm_state4 = "1000";
const sc_lv<8> mat_vec_multiply::ap_ST_fsm_state5 = "10000";
const sc_lv<8> mat_vec_multiply::ap_ST_fsm_state6 = "100000";
const sc_lv<8> mat_vec_multiply::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> mat_vec_multiply::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> mat_vec_multiply::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mat_vec_multiply::ap_const_lv32_1 = "1";
const sc_lv<1> mat_vec_multiply::ap_const_lv1_0 = "0";
const sc_lv<32> mat_vec_multiply::ap_const_lv32_2 = "10";
const sc_lv<32> mat_vec_multiply::ap_const_lv32_3 = "11";
const sc_lv<32> mat_vec_multiply::ap_const_lv32_5 = "101";
const sc_lv<32> mat_vec_multiply::ap_const_lv32_6 = "110";
const sc_lv<3> mat_vec_multiply::ap_const_lv3_0 = "000";
const sc_lv<1> mat_vec_multiply::ap_const_lv1_1 = "1";
const sc_lv<32> mat_vec_multiply::ap_const_lv32_4 = "100";
const sc_lv<32> mat_vec_multiply::ap_const_lv32_7 = "111";
const sc_lv<3> mat_vec_multiply::ap_const_lv3_4 = "100";
const sc_lv<3> mat_vec_multiply::ap_const_lv3_1 = "1";
const sc_lv<2> mat_vec_multiply::ap_const_lv2_0 = "00";
const bool mat_vec_multiply::ap_const_boolean_1 = true;

mat_vec_multiply::mat_vec_multiply(sc_module_name name) : sc_module(name), mVcdFile(0) {
    dot_prod_U = new mat_vec_multiply_bkb("dot_prod_U");
    dot_prod_U->clk(ap_clk);
    dot_prod_U->reset(ap_rst);
    dot_prod_U->address0(dot_prod_address0);
    dot_prod_U->ce0(dot_prod_ce0);
    dot_prod_U->we0(dot_prod_we0);
    dot_prod_U->d0(mul_ln13_reg_356);
    dot_prod_U->q0(dot_prod_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_accumulator_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( accumulator_addr_reg_387 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln20_fu_285_p1 );

    SC_METHOD(thread_accumulator_ce0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_accumulator_d0);
    sensitive << ( accumulator_q0 );
    sensitive << ( dot_prod_q0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_accumulator_we0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_add_ln13_fu_200_p2);
    sensitive << ( zext_ln12_reg_328 );
    sensitive << ( zext_ln13_1_fu_196_p1 );

    SC_METHOD(thread_add_ln20_1_fu_275_p2);
    sensitive << ( zext_ln19_fu_234_p1 );
    sensitive << ( sext_ln20_fu_271_p1 );

    SC_METHOD(thread_add_ln20_3_fu_302_p2);
    sensitive << ( sext_ln20_1_fu_281_p1 );
    sensitive << ( zext_ln20_1_fu_298_p1 );

    SC_METHOD(thread_add_ln20_fu_250_p2);
    sensitive << ( i1_0_reg_132 );
    sensitive << ( j2_0_reg_144 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln18_fu_216_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln18_fu_216_p2 );

    SC_METHOD(thread_dot_prod_address0);
    sensitive << ( zext_ln13_2_reg_341 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( sext_ln20_2_fu_308_p1 );

    SC_METHOD(thread_dot_prod_ce0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_dot_prod_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_i_1_fu_222_p2);
    sensitive << ( i1_0_reg_132 );

    SC_METHOD(thread_i_fu_161_p2);
    sensitive << ( i_0_reg_110 );

    SC_METHOD(thread_icmp_ln11_fu_155_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_110 );

    SC_METHOD(thread_icmp_ln12_fu_179_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_121 );

    SC_METHOD(thread_icmp_ln18_fu_216_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( i1_0_reg_132 );

    SC_METHOD(thread_icmp_ln19_fu_238_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( j2_0_reg_144 );

    SC_METHOD(thread_j_1_fu_244_p2);
    sensitive << ( j2_0_reg_144 );

    SC_METHOD(thread_j_fu_185_p2);
    sensitive << ( j_0_reg_121 );

    SC_METHOD(thread_mat_in_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln13_2_fu_205_p1 );

    SC_METHOD(thread_mat_in_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mul_ln13_fu_210_p0);
    sensitive << ( vec_in_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_mul_ln13_fu_210_p1);
    sensitive << ( mat_in_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_mul_ln13_fu_210_p2);
    sensitive << ( mul_ln13_fu_210_p0 );
    sensitive << ( mul_ln13_fu_210_p1 );

    SC_METHOD(thread_select_ln20_fu_264_p3);
    sensitive << ( xor_ln20_reg_369 );
    sensitive << ( i1_0_reg_132 );
    sensitive << ( tmp_4_fu_256_p3 );

    SC_METHOD(thread_sext_ln20_1_fu_281_p1);
    sensitive << ( add_ln20_1_fu_275_p2 );

    SC_METHOD(thread_sext_ln20_2_fu_308_p1);
    sensitive << ( add_ln20_3_fu_302_p2 );

    SC_METHOD(thread_sext_ln20_fu_271_p1);
    sensitive << ( select_ln20_fu_264_p3 );

    SC_METHOD(thread_tmp_2_fu_167_p3);
    sensitive << ( i_0_reg_110 );

    SC_METHOD(thread_tmp_3_fu_290_p3);
    sensitive << ( j2_0_reg_144 );

    SC_METHOD(thread_tmp_4_fu_256_p3);
    sensitive << ( add_ln20_fu_250_p2 );

    SC_METHOD(thread_vec_in_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln13_fu_191_p1 );

    SC_METHOD(thread_vec_in_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_xor_ln20_fu_228_p2);
    sensitive << ( i1_0_reg_132 );

    SC_METHOD(thread_zext_ln12_fu_175_p1);
    sensitive << ( tmp_2_fu_167_p3 );

    SC_METHOD(thread_zext_ln13_1_fu_196_p1);
    sensitive << ( j_0_reg_121 );

    SC_METHOD(thread_zext_ln13_2_fu_205_p1);
    sensitive << ( add_ln13_fu_200_p2 );

    SC_METHOD(thread_zext_ln13_fu_191_p1);
    sensitive << ( j_0_reg_121 );

    SC_METHOD(thread_zext_ln19_fu_234_p1);
    sensitive << ( j2_0_reg_144 );

    SC_METHOD(thread_zext_ln20_1_fu_298_p1);
    sensitive << ( tmp_3_fu_290_p3 );

    SC_METHOD(thread_zext_ln20_fu_285_p1);
    sensitive << ( j2_0_reg_144 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln11_fu_155_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln12_fu_179_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln18_fu_216_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln19_fu_238_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mat_vec_multiply_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, mat_in_address0, "(port)mat_in_address0");
    sc_trace(mVcdFile, mat_in_ce0, "(port)mat_in_ce0");
    sc_trace(mVcdFile, mat_in_q0, "(port)mat_in_q0");
    sc_trace(mVcdFile, vec_in_address0, "(port)vec_in_address0");
    sc_trace(mVcdFile, vec_in_ce0, "(port)vec_in_ce0");
    sc_trace(mVcdFile, vec_in_q0, "(port)vec_in_q0");
    sc_trace(mVcdFile, accumulator_address0, "(port)accumulator_address0");
    sc_trace(mVcdFile, accumulator_ce0, "(port)accumulator_ce0");
    sc_trace(mVcdFile, accumulator_we0, "(port)accumulator_we0");
    sc_trace(mVcdFile, accumulator_d0, "(port)accumulator_d0");
    sc_trace(mVcdFile, accumulator_q0, "(port)accumulator_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_161_p2, "i_fu_161_p2");
    sc_trace(mVcdFile, i_reg_323, "i_reg_323");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln12_fu_175_p1, "zext_ln12_fu_175_p1");
    sc_trace(mVcdFile, zext_ln12_reg_328, "zext_ln12_reg_328");
    sc_trace(mVcdFile, icmp_ln11_fu_155_p2, "icmp_ln11_fu_155_p2");
    sc_trace(mVcdFile, j_fu_185_p2, "j_fu_185_p2");
    sc_trace(mVcdFile, j_reg_336, "j_reg_336");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln13_2_fu_205_p1, "zext_ln13_2_fu_205_p1");
    sc_trace(mVcdFile, zext_ln13_2_reg_341, "zext_ln13_2_reg_341");
    sc_trace(mVcdFile, icmp_ln12_fu_179_p2, "icmp_ln12_fu_179_p2");
    sc_trace(mVcdFile, mul_ln13_fu_210_p2, "mul_ln13_fu_210_p2");
    sc_trace(mVcdFile, mul_ln13_reg_356, "mul_ln13_reg_356");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_1_fu_222_p2, "i_1_fu_222_p2");
    sc_trace(mVcdFile, i_1_reg_364, "i_1_reg_364");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, xor_ln20_fu_228_p2, "xor_ln20_fu_228_p2");
    sc_trace(mVcdFile, xor_ln20_reg_369, "xor_ln20_reg_369");
    sc_trace(mVcdFile, icmp_ln18_fu_216_p2, "icmp_ln18_fu_216_p2");
    sc_trace(mVcdFile, j_1_fu_244_p2, "j_1_fu_244_p2");
    sc_trace(mVcdFile, j_1_reg_377, "j_1_reg_377");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, icmp_ln19_fu_238_p2, "icmp_ln19_fu_238_p2");
    sc_trace(mVcdFile, accumulator_addr_reg_387, "accumulator_addr_reg_387");
    sc_trace(mVcdFile, dot_prod_address0, "dot_prod_address0");
    sc_trace(mVcdFile, dot_prod_ce0, "dot_prod_ce0");
    sc_trace(mVcdFile, dot_prod_we0, "dot_prod_we0");
    sc_trace(mVcdFile, dot_prod_q0, "dot_prod_q0");
    sc_trace(mVcdFile, i_0_reg_110, "i_0_reg_110");
    sc_trace(mVcdFile, j_0_reg_121, "j_0_reg_121");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i1_0_reg_132, "i1_0_reg_132");
    sc_trace(mVcdFile, j2_0_reg_144, "j2_0_reg_144");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, zext_ln13_fu_191_p1, "zext_ln13_fu_191_p1");
    sc_trace(mVcdFile, sext_ln20_2_fu_308_p1, "sext_ln20_2_fu_308_p1");
    sc_trace(mVcdFile, zext_ln20_fu_285_p1, "zext_ln20_fu_285_p1");
    sc_trace(mVcdFile, tmp_2_fu_167_p3, "tmp_2_fu_167_p3");
    sc_trace(mVcdFile, zext_ln13_1_fu_196_p1, "zext_ln13_1_fu_196_p1");
    sc_trace(mVcdFile, add_ln13_fu_200_p2, "add_ln13_fu_200_p2");
    sc_trace(mVcdFile, mul_ln13_fu_210_p0, "mul_ln13_fu_210_p0");
    sc_trace(mVcdFile, mul_ln13_fu_210_p1, "mul_ln13_fu_210_p1");
    sc_trace(mVcdFile, add_ln20_fu_250_p2, "add_ln20_fu_250_p2");
    sc_trace(mVcdFile, tmp_4_fu_256_p3, "tmp_4_fu_256_p3");
    sc_trace(mVcdFile, select_ln20_fu_264_p3, "select_ln20_fu_264_p3");
    sc_trace(mVcdFile, zext_ln19_fu_234_p1, "zext_ln19_fu_234_p1");
    sc_trace(mVcdFile, sext_ln20_fu_271_p1, "sext_ln20_fu_271_p1");
    sc_trace(mVcdFile, add_ln20_1_fu_275_p2, "add_ln20_1_fu_275_p2");
    sc_trace(mVcdFile, tmp_3_fu_290_p3, "tmp_3_fu_290_p3");
    sc_trace(mVcdFile, sext_ln20_1_fu_281_p1, "sext_ln20_1_fu_281_p1");
    sc_trace(mVcdFile, zext_ln20_1_fu_298_p1, "zext_ln20_1_fu_298_p1");
    sc_trace(mVcdFile, add_ln20_3_fu_302_p2, "add_ln20_3_fu_302_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("mat_vec_multiply.hdltvin.dat");
    mHdltvoutHandle.open("mat_vec_multiply.hdltvout.dat");
}

mat_vec_multiply::~mat_vec_multiply() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete dot_prod_U;
}

void mat_vec_multiply::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln11_fu_155_p2.read(), ap_const_lv1_1))) {
        i1_0_reg_132 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(icmp_ln19_fu_238_p2.read(), ap_const_lv1_1))) {
        i1_0_reg_132 = i_1_reg_364.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln12_fu_179_p2.read(), ap_const_lv1_1))) {
        i_0_reg_110 = i_reg_323.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_110 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        j2_0_reg_144 = j_1_reg_377.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln18_fu_216_p2.read()))) {
        j2_0_reg_144 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        j_0_reg_121 = j_reg_336.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln11_fu_155_p2.read(), ap_const_lv1_0))) {
        j_0_reg_121 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln19_fu_238_p2.read()))) {
        accumulator_addr_reg_387 =  (sc_lv<2>) (zext_ln20_fu_285_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_1_reg_364 = i_1_fu_222_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_323 = i_fu_161_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        j_1_reg_377 = j_1_fu_244_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_336 = j_fu_185_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        mul_ln13_reg_356 = mul_ln13_fu_210_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln18_fu_216_p2.read()))) {
        xor_ln20_reg_369 = xor_ln20_fu_228_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln11_fu_155_p2.read(), ap_const_lv1_0))) {
        zext_ln12_reg_328 = zext_ln12_fu_175_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln12_fu_179_p2.read()))) {
        zext_ln13_2_reg_341 = zext_ln13_2_fu_205_p1.read();
    }
}

void mat_vec_multiply::thread_accumulator_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        accumulator_address0 = accumulator_addr_reg_387.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        accumulator_address0 =  (sc_lv<2>) (zext_ln20_fu_285_p1.read());
    } else {
        accumulator_address0 = "XX";
    }
}

void mat_vec_multiply::thread_accumulator_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        accumulator_ce0 = ap_const_logic_1;
    } else {
        accumulator_ce0 = ap_const_logic_0;
    }
}

void mat_vec_multiply::thread_accumulator_d0() {
    accumulator_d0 = (!dot_prod_q0.read().is_01() || !accumulator_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(dot_prod_q0.read()) + sc_biguint<32>(accumulator_q0.read()));
}

void mat_vec_multiply::thread_accumulator_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        accumulator_we0 = ap_const_logic_1;
    } else {
        accumulator_we0 = ap_const_logic_0;
    }
}

void mat_vec_multiply::thread_add_ln13_fu_200_p2() {
    add_ln13_fu_200_p2 = (!zext_ln12_reg_328.read().is_01() || !zext_ln13_1_fu_196_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln12_reg_328.read()) + sc_biguint<6>(zext_ln13_1_fu_196_p1.read()));
}

void mat_vec_multiply::thread_add_ln20_1_fu_275_p2() {
    add_ln20_1_fu_275_p2 = (!zext_ln19_fu_234_p1.read().is_01() || !sext_ln20_fu_271_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(zext_ln19_fu_234_p1.read()) + sc_bigint<4>(sext_ln20_fu_271_p1.read()));
}

void mat_vec_multiply::thread_add_ln20_3_fu_302_p2() {
    add_ln20_3_fu_302_p2 = (!sext_ln20_1_fu_281_p1.read().is_01() || !zext_ln20_1_fu_298_p1.read().is_01())? sc_lv<6>(): (sc_bigint<6>(sext_ln20_1_fu_281_p1.read()) + sc_biguint<6>(zext_ln20_1_fu_298_p1.read()));
}

void mat_vec_multiply::thread_add_ln20_fu_250_p2() {
    add_ln20_fu_250_p2 = (!i1_0_reg_132.read().is_01() || !j2_0_reg_144.read().is_01())? sc_lv<3>(): (sc_biguint<3>(i1_0_reg_132.read()) + sc_biguint<3>(j2_0_reg_144.read()));
}

void mat_vec_multiply::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mat_vec_multiply::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mat_vec_multiply::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void mat_vec_multiply::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void mat_vec_multiply::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void mat_vec_multiply::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void mat_vec_multiply::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void mat_vec_multiply::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void mat_vec_multiply::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_fu_216_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mat_vec_multiply::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mat_vec_multiply::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_fu_216_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mat_vec_multiply::thread_dot_prod_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        dot_prod_address0 =  (sc_lv<4>) (sext_ln20_2_fu_308_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        dot_prod_address0 =  (sc_lv<4>) (zext_ln13_2_reg_341.read());
    } else {
        dot_prod_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void mat_vec_multiply::thread_dot_prod_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        dot_prod_ce0 = ap_const_logic_1;
    } else {
        dot_prod_ce0 = ap_const_logic_0;
    }
}

void mat_vec_multiply::thread_dot_prod_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        dot_prod_we0 = ap_const_logic_1;
    } else {
        dot_prod_we0 = ap_const_logic_0;
    }
}

void mat_vec_multiply::thread_i_1_fu_222_p2() {
    i_1_fu_222_p2 = (!i1_0_reg_132.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i1_0_reg_132.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void mat_vec_multiply::thread_i_fu_161_p2() {
    i_fu_161_p2 = (!i_0_reg_110.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_reg_110.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void mat_vec_multiply::thread_icmp_ln11_fu_155_p2() {
    icmp_ln11_fu_155_p2 = (!i_0_reg_110.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_110.read() == ap_const_lv3_4);
}

void mat_vec_multiply::thread_icmp_ln12_fu_179_p2() {
    icmp_ln12_fu_179_p2 = (!j_0_reg_121.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_121.read() == ap_const_lv3_4);
}

void mat_vec_multiply::thread_icmp_ln18_fu_216_p2() {
    icmp_ln18_fu_216_p2 = (!i1_0_reg_132.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i1_0_reg_132.read() == ap_const_lv3_4);
}

void mat_vec_multiply::thread_icmp_ln19_fu_238_p2() {
    icmp_ln19_fu_238_p2 = (!j2_0_reg_144.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j2_0_reg_144.read() == ap_const_lv3_4);
}

void mat_vec_multiply::thread_j_1_fu_244_p2() {
    j_1_fu_244_p2 = (!j2_0_reg_144.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j2_0_reg_144.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void mat_vec_multiply::thread_j_fu_185_p2() {
    j_fu_185_p2 = (!j_0_reg_121.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_0_reg_121.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void mat_vec_multiply::thread_mat_in_address0() {
    mat_in_address0 =  (sc_lv<4>) (zext_ln13_2_fu_205_p1.read());
}

void mat_vec_multiply::thread_mat_in_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        mat_in_ce0 = ap_const_logic_1;
    } else {
        mat_in_ce0 = ap_const_logic_0;
    }
}

void mat_vec_multiply::thread_mul_ln13_fu_210_p0() {
    mul_ln13_fu_210_p0 = vec_in_q0.read();
}

void mat_vec_multiply::thread_mul_ln13_fu_210_p1() {
    mul_ln13_fu_210_p1 = mat_in_q0.read();
}

void mat_vec_multiply::thread_mul_ln13_fu_210_p2() {
    mul_ln13_fu_210_p2 = (!mul_ln13_fu_210_p0.read().is_01() || !mul_ln13_fu_210_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln13_fu_210_p0.read()) * sc_bigint<32>(mul_ln13_fu_210_p1.read());
}

void mat_vec_multiply::thread_select_ln20_fu_264_p3() {
    select_ln20_fu_264_p3 = (!tmp_4_fu_256_p3.read()[0].is_01())? sc_lv<3>(): ((tmp_4_fu_256_p3.read()[0].to_bool())? xor_ln20_reg_369.read(): i1_0_reg_132.read());
}

void mat_vec_multiply::thread_sext_ln20_1_fu_281_p1() {
    sext_ln20_1_fu_281_p1 = esl_sext<6,4>(add_ln20_1_fu_275_p2.read());
}

void mat_vec_multiply::thread_sext_ln20_2_fu_308_p1() {
    sext_ln20_2_fu_308_p1 = esl_sext<64,6>(add_ln20_3_fu_302_p2.read());
}

void mat_vec_multiply::thread_sext_ln20_fu_271_p1() {
    sext_ln20_fu_271_p1 = esl_sext<4,3>(select_ln20_fu_264_p3.read());
}

void mat_vec_multiply::thread_tmp_2_fu_167_p3() {
    tmp_2_fu_167_p3 = esl_concat<3,2>(i_0_reg_110.read(), ap_const_lv2_0);
}

void mat_vec_multiply::thread_tmp_3_fu_290_p3() {
    tmp_3_fu_290_p3 = esl_concat<3,2>(j2_0_reg_144.read(), ap_const_lv2_0);
}

void mat_vec_multiply::thread_tmp_4_fu_256_p3() {
    tmp_4_fu_256_p3 = add_ln20_fu_250_p2.read().range(2, 2);
}

void mat_vec_multiply::thread_vec_in_address0() {
    vec_in_address0 =  (sc_lv<2>) (zext_ln13_fu_191_p1.read());
}

void mat_vec_multiply::thread_vec_in_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        vec_in_ce0 = ap_const_logic_1;
    } else {
        vec_in_ce0 = ap_const_logic_0;
    }
}

void mat_vec_multiply::thread_xor_ln20_fu_228_p2() {
    xor_ln20_fu_228_p2 = (i1_0_reg_132.read() ^ ap_const_lv3_4);
}

void mat_vec_multiply::thread_zext_ln12_fu_175_p1() {
    zext_ln12_fu_175_p1 = esl_zext<6,5>(tmp_2_fu_167_p3.read());
}

void mat_vec_multiply::thread_zext_ln13_1_fu_196_p1() {
    zext_ln13_1_fu_196_p1 = esl_zext<6,3>(j_0_reg_121.read());
}

void mat_vec_multiply::thread_zext_ln13_2_fu_205_p1() {
    zext_ln13_2_fu_205_p1 = esl_zext<64,6>(add_ln13_fu_200_p2.read());
}

void mat_vec_multiply::thread_zext_ln13_fu_191_p1() {
    zext_ln13_fu_191_p1 = esl_zext<64,3>(j_0_reg_121.read());
}

void mat_vec_multiply::thread_zext_ln19_fu_234_p1() {
    zext_ln19_fu_234_p1 = esl_zext<4,3>(j2_0_reg_144.read());
}

void mat_vec_multiply::thread_zext_ln20_1_fu_298_p1() {
    zext_ln20_1_fu_298_p1 = esl_zext<6,5>(tmp_3_fu_290_p3.read());
}

void mat_vec_multiply::thread_zext_ln20_fu_285_p1() {
    zext_ln20_fu_285_p1 = esl_zext<64,3>(j2_0_reg_144.read());
}

void mat_vec_multiply::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln11_fu_155_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln12_fu_179_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(icmp_ln18_fu_216_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(icmp_ln19_fu_238_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<8>) ("XXXXXXXX");
            break;
    }
}

void mat_vec_multiply::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mat_in_address0\" :  \"" << mat_in_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mat_in_ce0\" :  \"" << mat_in_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mat_in_q0\" :  \"" << mat_in_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vec_in_address0\" :  \"" << vec_in_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vec_in_ce0\" :  \"" << vec_in_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"vec_in_q0\" :  \"" << vec_in_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"accumulator_address0\" :  \"" << accumulator_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"accumulator_ce0\" :  \"" << accumulator_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"accumulator_we0\" :  \"" << accumulator_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"accumulator_d0\" :  \"" << accumulator_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"accumulator_q0\" :  \"" << accumulator_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

