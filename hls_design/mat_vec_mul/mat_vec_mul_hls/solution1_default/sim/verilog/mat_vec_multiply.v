// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mat_vec_multiply,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.035000,HLS_SYN_LAT=98,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=142,HLS_SYN_LUT=323,HLS_VERSION=2020_1}" *)

module mat_vec_multiply (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mat_in_address0,
        mat_in_ce0,
        mat_in_q0,
        vec_in_address0,
        vec_in_ce0,
        vec_in_q0,
        accumulator_address0,
        accumulator_ce0,
        accumulator_we0,
        accumulator_d0,
        accumulator_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] mat_in_address0;
output   mat_in_ce0;
input  [31:0] mat_in_q0;
output  [1:0] vec_in_address0;
output   vec_in_ce0;
input  [31:0] vec_in_q0;
output  [1:0] accumulator_address0;
output   accumulator_ce0;
output   accumulator_we0;
output  [31:0] accumulator_d0;
input  [31:0] accumulator_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mat_in_ce0;
reg vec_in_ce0;
reg[1:0] accumulator_address0;
reg accumulator_ce0;
reg accumulator_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_161_p2;
reg   [2:0] i_reg_323;
wire    ap_CS_fsm_state2;
wire   [5:0] zext_ln12_fu_175_p1;
reg   [5:0] zext_ln12_reg_328;
wire   [0:0] icmp_ln11_fu_155_p2;
wire   [2:0] j_fu_185_p2;
reg   [2:0] j_reg_336;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln13_2_fu_205_p1;
reg   [63:0] zext_ln13_2_reg_341;
wire   [0:0] icmp_ln12_fu_179_p2;
wire   [31:0] mul_ln13_fu_210_p2;
reg   [31:0] mul_ln13_reg_356;
wire    ap_CS_fsm_state4;
wire   [2:0] i_1_fu_222_p2;
reg   [2:0] i_1_reg_364;
wire    ap_CS_fsm_state6;
wire   [2:0] xor_ln20_fu_228_p2;
reg   [2:0] xor_ln20_reg_369;
wire   [0:0] icmp_ln18_fu_216_p2;
wire   [2:0] j_1_fu_244_p2;
reg   [2:0] j_1_reg_377;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln19_fu_238_p2;
reg   [1:0] accumulator_addr_reg_387;
reg   [3:0] dot_prod_address0;
reg    dot_prod_ce0;
reg    dot_prod_we0;
wire   [31:0] dot_prod_q0;
reg   [2:0] i_0_reg_110;
reg   [2:0] j_0_reg_121;
wire    ap_CS_fsm_state5;
reg   [2:0] i1_0_reg_132;
reg   [2:0] j2_0_reg_144;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln13_fu_191_p1;
wire  signed [63:0] sext_ln20_2_fu_308_p1;
wire   [63:0] zext_ln20_fu_285_p1;
wire   [4:0] tmp_2_fu_167_p3;
wire   [5:0] zext_ln13_1_fu_196_p1;
wire   [5:0] add_ln13_fu_200_p2;
wire  signed [31:0] mul_ln13_fu_210_p0;
wire  signed [31:0] mul_ln13_fu_210_p1;
wire   [2:0] add_ln20_fu_250_p2;
wire   [0:0] tmp_4_fu_256_p3;
wire   [2:0] select_ln20_fu_264_p3;
wire   [3:0] zext_ln19_fu_234_p1;
wire  signed [3:0] sext_ln20_fu_271_p1;
wire   [3:0] add_ln20_1_fu_275_p2;
wire   [4:0] tmp_3_fu_290_p3;
wire  signed [5:0] sext_ln20_1_fu_281_p1;
wire   [5:0] zext_ln20_1_fu_298_p1;
wire   [5:0] add_ln20_3_fu_302_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

mat_vec_multiply_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
dot_prod_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dot_prod_address0),
    .ce0(dot_prod_ce0),
    .we0(dot_prod_we0),
    .d0(mul_ln13_reg_356),
    .q0(dot_prod_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_reg_132 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln19_fu_238_p2 == 1'd1))) begin
        i1_0_reg_132 <= i_1_reg_364;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_110 <= i_reg_323;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_110 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j2_0_reg_144 <= j_1_reg_377;
    end else if (((icmp_ln18_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        j2_0_reg_144 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_reg_121 <= j_reg_336;
    end else if (((icmp_ln11_fu_155_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_121 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        accumulator_addr_reg_387 <= zext_ln20_fu_285_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_reg_364 <= i_1_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_323 <= i_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_1_reg_377 <= j_1_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_336 <= j_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln13_reg_356 <= mul_ln13_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        xor_ln20_reg_369 <= xor_ln20_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_155_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln12_reg_328[4 : 2] <= zext_ln12_fu_175_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln13_2_reg_341[5 : 0] <= zext_ln13_2_fu_205_p1[5 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        accumulator_address0 = accumulator_addr_reg_387;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        accumulator_address0 = zext_ln20_fu_285_p1;
    end else begin
        accumulator_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        accumulator_ce0 = 1'b1;
    end else begin
        accumulator_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        accumulator_we0 = 1'b1;
    end else begin
        accumulator_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        dot_prod_address0 = sext_ln20_2_fu_308_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dot_prod_address0 = zext_ln13_2_reg_341;
    end else begin
        dot_prod_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        dot_prod_ce0 = 1'b1;
    end else begin
        dot_prod_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dot_prod_we0 = 1'b1;
    end else begin
        dot_prod_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mat_in_ce0 = 1'b1;
    end else begin
        mat_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_in_ce0 = 1'b1;
    end else begin
        vec_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln11_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln12_fu_179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln18_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln19_fu_238_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accumulator_d0 = (dot_prod_q0 + accumulator_q0);

assign add_ln13_fu_200_p2 = (zext_ln12_reg_328 + zext_ln13_1_fu_196_p1);

assign add_ln20_1_fu_275_p2 = ($signed(zext_ln19_fu_234_p1) + $signed(sext_ln20_fu_271_p1));

assign add_ln20_3_fu_302_p2 = ($signed(sext_ln20_1_fu_281_p1) + $signed(zext_ln20_1_fu_298_p1));

assign add_ln20_fu_250_p2 = (i1_0_reg_132 + j2_0_reg_144);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign i_1_fu_222_p2 = (i1_0_reg_132 + 3'd1);

assign i_fu_161_p2 = (i_0_reg_110 + 3'd1);

assign icmp_ln11_fu_155_p2 = ((i_0_reg_110 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_179_p2 = ((j_0_reg_121 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_216_p2 = ((i1_0_reg_132 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_238_p2 = ((j2_0_reg_144 == 3'd4) ? 1'b1 : 1'b0);

assign j_1_fu_244_p2 = (j2_0_reg_144 + 3'd1);

assign j_fu_185_p2 = (j_0_reg_121 + 3'd1);

assign mat_in_address0 = zext_ln13_2_fu_205_p1;

assign mul_ln13_fu_210_p0 = vec_in_q0;

assign mul_ln13_fu_210_p1 = mat_in_q0;

assign mul_ln13_fu_210_p2 = ($signed(mul_ln13_fu_210_p0) * $signed(mul_ln13_fu_210_p1));

assign select_ln20_fu_264_p3 = ((tmp_4_fu_256_p3[0:0] === 1'b1) ? xor_ln20_reg_369 : i1_0_reg_132);

assign sext_ln20_1_fu_281_p1 = $signed(add_ln20_1_fu_275_p2);

assign sext_ln20_2_fu_308_p1 = $signed(add_ln20_3_fu_302_p2);

assign sext_ln20_fu_271_p1 = $signed(select_ln20_fu_264_p3);

assign tmp_2_fu_167_p3 = {{i_0_reg_110}, {2'd0}};

assign tmp_3_fu_290_p3 = {{j2_0_reg_144}, {2'd0}};

assign tmp_4_fu_256_p3 = add_ln20_fu_250_p2[32'd2];

assign vec_in_address0 = zext_ln13_fu_191_p1;

assign xor_ln20_fu_228_p2 = (i1_0_reg_132 ^ 3'd4);

assign zext_ln12_fu_175_p1 = tmp_2_fu_167_p3;

assign zext_ln13_1_fu_196_p1 = j_0_reg_121;

assign zext_ln13_2_fu_205_p1 = add_ln13_fu_200_p2;

assign zext_ln13_fu_191_p1 = j_0_reg_121;

assign zext_ln19_fu_234_p1 = j2_0_reg_144;

assign zext_ln20_1_fu_298_p1 = tmp_3_fu_290_p3;

assign zext_ln20_fu_285_p1 = j2_0_reg_144;

always @ (posedge ap_clk) begin
    zext_ln12_reg_328[1:0] <= 2'b00;
    zext_ln12_reg_328[5] <= 1'b0;
    zext_ln13_2_reg_341[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //mat_vec_multiply
